{"version":3,"sources":["api/config/Constants.js","common/PageLoader.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","API_CONSUMER","APP_TOKEN","set","userName","name","token","sessionStorage","setItem","get","getItem","remove","clear","cond1","this","cond2","PageLoader","id","class","width","height","cx","cy","r","fill","stroke-width","stroke","stroke-miterlimit","Component","Directions","lazy","About","Contact","Login","Index","Editor","Introduction","Aboutgc","DimpleAnil","Events","OBEs","Miracles","Prayers","Images","App","className","fallback","exact","path","render","to","props","notEmpty","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b55e68d6.chunk.js","sourcesContent":["export const API_URL = 'http://newgcadmin.a1abilities.co.nz/'; // Config[KEY].API_URL;\nexport const AUTH_URL = 'http://newgcadmin.a1abilities.co.nz/'; // Config[KEY].AUTH_URL;\nexport const API_CONSUMER = 'http://newgcadminn.a1abilities.co.nz/'; // Config[KEY].API_URL;\n\n// export const API_URL = 'http://localhost:5001'; // Config[KEY].API_URL;\n// export const AUTH_URL = 'http://localhost:5001'; // Config[KEY].AUTH_URL;\n// export const API_CONSUMER = 'http://localhost:5001'; // Config[KEY].API_URL;\n\nexport const APP_TOKEN = {\n    set: ({userName, name, token}) => {\n        sessionStorage.setItem('token', token);\n        sessionStorage.setItem('userName', userName);\n        sessionStorage.setItem('name', name);\n    },\n    get: () => ({\n        token: sessionStorage.getItem('token'),\n        userName : sessionStorage.getItem('userName'),\n        name : sessionStorage.getItem('name'),\n    }),\n    remove: () => {\n        sessionStorage.clear();\n    },\n    get notEmpty() {\n        const cond1 = this.get().token !== null;\n        const cond2 = this.get().token !== '';\n        return cond1 && cond2;\n    }\n}","import React, { Component } from 'react';\n\n\n\nexport default class PageLoader extends Component {\n    render() {\n        return(\n            <div id=\"loader\" class=\"show fullscreen center\">\n                <svg class=\"circular\" width=\"48px\" height=\"48px\">\n                    <circle class=\"path-bg\" cx=\"24\" cy=\"24\" r=\"22\" fill=\"none\" stroke-width=\"4\" stroke=\"#eeeeee\"/>\n                    <circle class=\"path\" cx=\"24\" cy=\"24\" r=\"22\" fill=\"none\" stroke-width=\"4\" stroke-miterlimit=\"10\" stroke=\"#f4b214\"/>\n                </svg>\n            </div>\n        )\n    }\n}","import React, {Suspense, lazy} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport './App.css';\n\nimport {APP_TOKEN} from  './api/config/Constants.js'\nimport PageLoader from './common/PageLoader';\n\n\nconst Directions = lazy(()=> import('./modules/Directions'));\n\n\n\n\nconst About = lazy(()=> import('./modules/AboutCompany'));\nconst Contact = lazy(()=> import('./modules/ContactUs'));\nconst Login = lazy(()=> import('./modules/login'));\nconst Index = lazy(()=> import('./modules/index'));\nconst Editor = lazy(()=> import('./modules/editor'));\nconst Introduction = lazy(()=> import('./modules/Introduction'));\nconst Aboutgc = lazy(()=> import('./modules/Aboutgc'));\nconst DimpleAnil = lazy(()=> import('./modules/DimpleAnil'));\nconst Events = lazy(()=> import('./modules/Events'));\nconst OBEs = lazy(()=> import('./modules/OBEs'));\nconst Miracles = lazy(()=> import('./modules/Miracles'));\nconst Prayers = lazy(()=> import('./modules/Prayers'));\n\nconst Images = lazy(()=> import('./modules/Components/images'));\n\n\nfunction App() {\n \n  return (\n      <div className=\"main-wrapper\">\n        <div className=\"app\" id=\"app\"> \n          <Router>\n            <Suspense fallback={<PageLoader />}>\n              <Switch>\n                {/* <Route exact path=\"/\" component={Index} />\n                <Route exact path=\"/editor\"  render={props => { return <Editor {...props.location.state} /> }}  />\n                <Route exact path=\"/OurTechnology\" component={OurTechnology} />\n                <Route exact path=\"/Services\" component={Services} />\n                <Route exact path=\"/Contact\" component={Contact} />\n                <Route exact path=\"/About\" component={About} />\n                <Route exact path=\"/WhyUs\" component={WhyUs} />\n                <Route exact path=\"/OurGoals\" component={OurGoals} />\n                <Route exact path=\"/OurPartners\" component={OurPartners} />\n                <Route exact path=\"/Portfolio\" component={Portfolio} />                \n                <Route exact path=\"/login\" render={props => { return <Login {...props} /> }}   />      */}\n\n                <Route exact path=\"/\" render={() => <Redirect to=\"/login\" /> } />\n               \n                <Route exact path=\"/Prayers\" render={props => { return APP_TOKEN.notEmpty ? <Prayers {...props}/>  :  <Redirect to=\"/login\" />  }} />\n\n                <Route exact path=\"/Directions\" render={props => { return APP_TOKEN.notEmpty ? <Directions  {...props}/>  :  <Redirect to=\"/login\" />  }} />\n                <Route exact path=\"/Introduction\" render={props => { return APP_TOKEN.notEmpty ? <Introduction {...props} />  :  <Redirect to=\"/login\" />  }} />                \n                <Route exact path=\"/DimpleAnil\" render={props => { return APP_TOKEN.notEmpty ? <DimpleAnil {...props} />  :  <Redirect to=\"/login\" />  }} />                \n                <Route exact path=\"/Aboutgc\" render={props => { return APP_TOKEN.notEmpty ? <Aboutgc {...props} />  :  <Redirect to=\"/login\" />  }} />                \n                <Route exact path=\"/Events\" render={props => { return APP_TOKEN.notEmpty ? <Events {...props}/>  :  <Redirect to=\"/login\" />  }} />\n                <Route exact path=\"/OBEs\" render={props => { return APP_TOKEN.notEmpty ? <OBEs {...props}/>  :  <Redirect to=\"/login\" />  }} />\n                <Route exact path=\"/Miracles\" render={props => { return APP_TOKEN.notEmpty ? <Miracles {...props}/>  :  <Redirect to=\"/login\" />  }} />\n                 <Route exact path=\"/home\" render={props => { return APP_TOKEN.notEmpty ? <Index {...props}/> :  <Redirect to=\"/login\" /> }} />\n                <Route exact path=\"/editor\"  render={props => { return APP_TOKEN.notEmpty ? <Editor {...props}  />  :  <Redirect to=\"/login\" />  }}  />\n                <Route exact path=\"/images\"  render={props => { return APP_TOKEN.notEmpty ? <Images {...props}  />  :  <Redirect to=\"/login\" />  }}  />\n\n                <Route exact path=\"/Contact\" render={props => { return APP_TOKEN.notEmpty ? <Contact {...props} />  :  <Redirect to=\"/login\" />  }} />\n                <Route exact path=\"/About\" render={props => { return APP_TOKEN.notEmpty ? <About  {...props}/>  :  <Redirect to=\"/login\" />  }} />\n                <Route exact path=\"/login\" render={props => { return APP_TOKEN.notEmpty ? <Redirect to=\"/home\" /> :  <Login {...props} /> }}  />     \n             \n\n              </Switch>\n            </Suspense>\n          </Router>\n        </div>\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}